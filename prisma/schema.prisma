generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  email       String    @unique
  password    String
  username    String    @unique
  avatarUrl   String?
  dateOfBirth DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bio         String?
  location    String?
  posts       Post[]
  likes       Like[]
  comments    Comment[]
  followers   Follows[] @relation("following")
  following   Follows[] @relation("follower")

  @@map("users")
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @db.ObjectId

  @@map("follows")
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  imageUrl  String?
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String    @db.ObjectId
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())

  @@map("posts")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?  @db.ObjectId
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?  @db.ObjectId

  @@map("likes")
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String @db.ObjectId
  likes   Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}
