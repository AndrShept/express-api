generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum NotificationType {
  message
  like
  comment
  post
  follower
  photo
}

model User {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  email                 String         @unique
  password              String
  username              String         @unique
  avatarUrl             String?
  dateOfBirth           DateTime?
  bio                   String?
  location              String?
  isOnline              Boolean        @default(false)
  posts                 Post[]
  likes                 Like[]
  comments              Comment[]
  followers             Follows[]      @relation("following")
  following             Follows[]      @relation("follower")
  conversationsSent     Conversation[] @relation("sender")
  conversationsReceived Conversation[] @relation("receiver")
  message               Message[]
  favoritePosts         FavoritePost[]
  viewPost              View[]
  notification          Notification[] @relation("author")
  notificationReceiver  Notification[] @relation("receiver")
  photos                Photo[]
  hero                  Hero           @relation(fields: [heroId], references: [id])
  heroId                String         @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Hero {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  level     Int    @default(1)
  str       Int    @default(10)
  int       Int    @default(10)
  const     Int    @default(10)
  health    Int?
  maxHealth Int?
  mana      Int?
  maxMana   Int?
  exp       Int    @default(0)

  weapon      Item? @relation("HeroWeapon", fields: [weaponId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shield      Item? @relation("HeroShield", fields: [shieldId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  breastplate Item? @relation("HeroBreastplate", fields: [breastplateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ring        Item? @relation("HeroRing", fields: [ringId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  amulet      Item? @relation("HeroAmulet", fields: [amuletId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  belt        Item? @relation("HeroBelt", fields: [beltId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shoes       Item? @relation("HeroShoes", fields: [shoesId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  helmet      Item? @relation("HeroHelmet", fields: [helmetId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  users      User[]
  buffs      Buff[]
  inventorys Item[] @relation("HeroInventory")

  weaponId      String? @unique @db.ObjectId
  shieldId      String? @unique @db.ObjectId
  breastplateId String? @unique @db.ObjectId
  ringId        String? @unique @db.ObjectId
  amuletId      String? @unique @db.ObjectId
  beltId        String? @unique @db.ObjectId
  shoesId       String? @unique @db.ObjectId
  helmetId      String? @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  type       ItemType
  weaponType WeaponType?

  isEquipped    Boolean @default(false)
  isCanEquipped Boolean @default(true)

  strBonus   Int?
  intBonus   Int?
  constBonus Int?

  hero   Hero?   @relation("HeroInventory", fields: [heroId], references: [id], onDelete: Cascade)
  heroId String? @db.ObjectId

  heroWeapon      Hero? @relation("HeroWeapon")
  heroShield      Hero? @relation("HeroShield")
  heroBreastplate Hero? @relation("HeroBreastplate")
  heroBelt        Hero? @relation("HeroBelt")
  heroShoes       Hero? @relation("HeroShoes")
  heroHelmet      Hero? @relation("HeroHelmet")
  heroRing        Hero? @relation("HeroRing")
  heroAmulet      Hero? @relation("HeroAmulet")

  @@map("items")
}

enum ItemType {
  POTION
  BOOK
  WEAPON
  BREASTPLATE
  BELT
  SHOES
  HELMET
  SHIELD
  RING
  AMULET
}

enum WeaponType {
  ONE_HAND
  TWO_HAND
}

model Buff {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  str      Int?
  int      Int?
  const    Int?
  duration Int

  hero   Hero?   @relation(fields: [heroId], references: [id])
  heroId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Photo {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  url  String
  size Int
  name String

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.ObjectId

  likes        Like[]
  comments     Comment[]
  view         View[]
  notification Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("photos")
}

model Notification {
  id     String           @id @default(auto()) @map("_id") @db.ObjectId
  type   NotificationType
  isRead Boolean          @default(false)

  user       User?    @relation("receiver", fields: [userId], references: [id], onDelete: Cascade)
  userId     String?  @db.ObjectId
  author     User?    @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String?  @db.ObjectId
  post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String?  @db.ObjectId
  follower   Follows? @relation(fields: [followerId], references: [id], onDelete: Cascade)
  followerId String?  @db.ObjectId
  like       Like?    @relation(fields: [likeId], references: [id], onDelete: Cascade)
  likeId     String?  @db.ObjectId
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  String?  @db.ObjectId
  photo      Photo?   @relation(fields: [photoId], references: [id], onDelete: Cascade)
  photoId    String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model FavoritePost {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("favoritePosts")
}

model Conversation {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  messages     Message[]
  senderUser   User      @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverUser User      @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  senderId     String    @db.ObjectId
  receiverId   String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("conversations")
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  imageUrl       String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  author         User?         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  isRead         Boolean       @default(false)
  conversationId String        @db.ObjectId
  authorId       String        @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @db.ObjectId

  notifications Notification[]

  @@map("follows")
}

model Post {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  imageUrl     String?
  videoUrl     String?
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String         @db.ObjectId
  likes        Like[]
  comments     Comment[]
  favoritePost FavoritePost[]
  view         View[]
  notification Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model View {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photo     Photo?   @relation(fields: [photoId], references: [id], onDelete: Cascade)
  photoId   String?  @db.ObjectId

  @@map("views")
}

model Like {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String         @db.ObjectId
  post          Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String?        @db.ObjectId
  Comment       Comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId     String?        @db.ObjectId
  notifications Notification[]
  photo         Photo?         @relation(fields: [photoId], references: [id], onDelete: Cascade)
  photoId       String?        @db.ObjectId

  @@map("likes")
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  author   User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String? @db.ObjectId

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String? @db.ObjectId

  photo   Photo?  @relation(fields: [photoId], references: [id], onDelete: Cascade)
  photoId String? @db.ObjectId

  likes         Like[]
  notifications Notification[]

  replyId  String?
  parentId String?
  reply    Comment?  @relation("ParentChildren", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replys   Comment[] @relation("ParentChildren")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}
