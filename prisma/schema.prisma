generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  email                 String         @unique
  password              String
  username              String         @unique
  avatarUrl             String?
  dateOfBirth           DateTime?
  bio                   String?
  location              String?
  isOnline              Boolean        @default(false)
  posts                 Post[]
  likes                 Like[]
  comments              Comment[]
  followers             Follows[]      @relation("following")
  following             Follows[]      @relation("follower")
  conversationsSent     Conversation[] @relation("sender")
  conversationsReceived Conversation[] @relation("receiver")
  message               Message[]
  favoritePosts         FavoritePost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model FavoritePost {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("favoritePosts")
}

model Conversation {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  messages     Message[]
  senderUser   User      @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverUser User      @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  senderId     String    @db.ObjectId
  receiverId   String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("conversations")
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  imageUrl       String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  author         User?         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  isRead         Boolean       @default(false)
  conversationId String        @db.ObjectId
  authorId       String        @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @db.ObjectId

  @@map("follows")
}

model Post {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  imageUrl     String?
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String         @db.ObjectId
  likes        Like[]
  comments     Comment[]
  favoritePost FavoritePost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?  @db.ObjectId
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?  @db.ObjectId

  @@map("likes")
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String @db.ObjectId
  likes   Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}
