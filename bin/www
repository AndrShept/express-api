#!/usr/bin/env node
const socketIo = require('socket.io');
const { prisma } = require('../prisma/prisma');

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = socketIo(server, {
  cors: {
    origin: '*',
  },
});
const socketUserMap = new Map();
// Слухайте підключення клієнтів до сокета
io.on('connection', async (socket) => {
  console.log('A user connected');

  socket.on('userId', async (userId) => {

    if (userId) {
      const user = await prisma.user.update({
        where: { id: userId },
        data: { isOnline: true },
      });
   
    }
  });

  socket.on('disconnect', async () => {
    // const user = await prisma.user.update({
    //   where: { id: userId },
    //   data: { isOnline: false },
    // });
    // console.log('USER', user);

    console.log('User disconnected');
  });
});

server.listen(port, () => {
  console.log(`Server running port-${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
